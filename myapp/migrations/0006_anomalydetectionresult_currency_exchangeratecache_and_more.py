# Generated by Django 4.2.20 on 2025-04-01 11:36

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('myapp', '0005_exchangeratealert_alert_id'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnomalyDetectionResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_currency', models.CharField(help_text='Base currency code (e.g., USD)', max_length=3, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator('^[A-Z]{3}$', 'Currency code must be 3 uppercase letters')])),
                ('target_currency', models.CharField(help_text='Target currency code (e.g., EUR)', max_length=3, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator('^[A-Z]{3}$', 'Currency code must be 3 uppercase letters')])),
                ('analysis_date', models.DateTimeField(auto_now_add=True, help_text='When the analysis was performed')),
                ('analysis_period_days', models.PositiveIntegerField(default=30, help_text='Analysis period in days')),
                ('anomaly_count', models.PositiveIntegerField(help_text='Number of anomalies detected')),
                ('result_data', models.JSONField(help_text='Complete anomaly detection results in ADAGE 3.0 format')),
            ],
            options={
                'verbose_name': 'Anomaly Detection Result',
                'verbose_name_plural': 'Anomaly Detection Results',
                'ordering': ['-analysis_date'],
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('code', models.CharField(help_text='ISO 4217 currency code (e.g., USD, EUR)', max_length=3, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator('^[A-Z]{3}$', 'Currency code must be 3 uppercase letters')])),
                ('name', models.CharField(help_text='Currency name', max_length=100)),
            ],
            options={
                'verbose_name': 'Currency',
                'verbose_name_plural': 'Currencies',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='ExchangeRateCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_currency', models.CharField(help_text='Base currency code (e.g., USD)', max_length=3, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator('^[A-Z]{3}$', 'Currency code must be 3 uppercase letters')])),
                ('target_currency', models.CharField(help_text='Target currency code (e.g., EUR)', max_length=3, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator('^[A-Z]{3}$', 'Currency code must be 3 uppercase letters')])),
                ('rate_data', models.JSONField(help_text='Cached exchange rate data from Alpha Vantage')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='When the cache was last updated')),
                ('expires_at', models.DateTimeField(help_text='When the cache expires')),
            ],
            options={
                'verbose_name': 'Exchange Rate Cache',
                'verbose_name_plural': 'Exchange Rate Caches',
                'indexes': [models.Index(fields=['base_currency', 'target_currency'], name='myapp_excha_base_cu_0b8b73_idx'), models.Index(fields=['expires_at'], name='myapp_excha_expires_114a73_idx')],
                'unique_together': {('base_currency', 'target_currency')},
            },
        ),
        migrations.CreateModel(
            name='AnomalyPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(help_text='When the anomaly occurred')),
                ('rate', models.FloatField(help_text='Exchange rate value')),
                ('z_score', models.FloatField(help_text='Z-score of the anomaly')),
                ('percent_change', models.FloatField(help_text='Percent change from previous value')),
                ('result', models.ForeignKey(help_text='Related anomaly detection result', on_delete=django.db.models.deletion.CASCADE, related_name='anomaly_points', to='myapp.anomalydetectionresult')),
            ],
            options={
                'verbose_name': 'Anomaly Point',
                'verbose_name_plural': 'Anomaly Points',
                'ordering': ['timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='anomalydetectionresult',
            index=models.Index(fields=['base_currency', 'target_currency'], name='myapp_anoma_base_cu_329a89_idx'),
        ),
        migrations.AddIndex(
            model_name='anomalydetectionresult',
            index=models.Index(fields=['analysis_date'], name='myapp_anoma_analysi_e2c200_idx'),
        ),
        migrations.AddIndex(
            model_name='anomalypoint',
            index=models.Index(fields=['timestamp'], name='myapp_anoma_timesta_bafa7a_idx'),
        ),
    ]
